# 此文件要与wsgi-file的python文件同目录，并且指定为chdir
# virtualenv为python创建的虚拟环境，是chdir目录的子目录
# socket文件用来与nginx交互，该.sock文件不用事先创建
# .sock文件要与nginx配置时的名称及目录相同，此处我们命名为production_flask.sock
# python文件里的flask项目名必须与callable的值一样，一般为app
# threads必须是大于等于2的值，推荐为2，不然python文件会缺少线程
# vacuum要为true，每次自动清理.sock文件
# chmod-socket必须为666，这样才能接受nginx的访问
# 最后两行可以不要

[uwsgi]
my_app_folder = /home/user/myproject

#http=127.0.0.1:5000;
socket = %(my_app_folder)/production_flask.sock
chdir=%(my_app_folder)
virtualenv=%(my_app_folder)/myprojectenv/
wsgi-file=flaskapp.py
callable= app
processes=4
threads=2
master=true

vacuum = true
chmod-socket = 666

die-on-term = true
stats = %(my_app_folder)/stats.production_flask.sock

# 使用uwsgi uwsgi.ini命令来开启uwsgi服务
# ctrl+Z 退出，但是服务依然在运行，可以查看进程并杀死相应的进程名来终止
# ctrl+C 终止并推出

# 注意仔细查看uwsgi uwsgi.ini命令后的所有提示信息，warning可以不用管，
# 有erroe必须解决，若是报地址被占用的错误，请查看进程并杀死uwsgi进程
# 使用的命令参考reference.txt